#!/bin/bash
# Safe Aider Launcher Script
# Handles missing files and problematic git references gracefully

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
AIDER_MODEL="ollama/qwen2.5:3b"
EDITOR_MODEL="ollama/qwen2.5-coder:0.5b-instruct"
MAX_TOKENS=512
CURRENT_DIR=$(pwd)

log_info() {
    echo -e "${GREEN}🔧 $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to clean up problematic git references
cleanup_git_refs() {
    if [ -d ".git" ]; then
        log_info "Cleaning up problematic git references..."

        # Remove any cached file references that might point to missing files
        if [ -f ".git/index" ]; then
            git update-index --refresh >/dev/null 2>&1 || true
        fi

        # Check for and ignore missing files
        if git status --porcelain 2>/dev/null | grep -q "^!!"; then
            log_warning "Found missing files in git status, they will be ignored"
        fi
    fi
}

# Function to create a project-specific .aiderignore
create_project_aiderignore() {
    local project_ignore=".aiderignore"

    if [ ! -f "$project_ignore" ]; then
        log_info "Creating project-specific .aiderignore..."
        cat > "$project_ignore" << 'EOF'
# Project-specific aider ignore patterns
# Generated by safe_aider.sh

# Backup and chaos directories (problematic)
backups/
chaos/
ecosystem-integration-testing-*/
**/backups/
**/chaos/
**/ecosystem-integration-testing-*/

# Version control
.git/
.gitignore

# Build artifacts
node_modules/
target/
build/
dist/
*.pyc
__pycache__/

# Large files that pollute context
*.jpg
*.jpeg
*.png
*.gif
*.pdf
*.mp4
*.mp3
*.zip
*.tar
*.gz

# Logs and dumps
*.log
*.dump

# Configuration with secrets
.env
.env.local
config/secrets.*

# QRY specific
captures/
daily/
generated/
.uroboro/
*.capture
*.insight

# Lock files
package-lock.json
yarn.lock
Cargo.lock
Pipfile.lock
poetry.lock
EOF
        log_info "Created $project_ignore"
    fi
}

# Function to check ollama status
check_ollama() {
    if ! command -v ollama >/dev/null 2>&1; then
        log_error "Ollama not found. Please install ollama first."
        exit 1
    fi

    if ! pgrep -f ollama >/dev/null; then
        log_info "Starting ollama service..."
        ollama serve &
        sleep 3
    fi

    # Check if models are available
    if ! ollama list | grep -q "qwen2.5:3b"; then
        log_warning "Quality model (qwen2.5:3b) not found. Downloading..."
        ollama pull qwen2.5:3b
    fi

    if ! ollama list | grep -q "qwen2.5-coder:0.5b-instruct"; then
        log_warning "Fast model (qwen2.5-coder:0.5b-instruct) not found. Downloading..."
        ollama pull qwen2.5-coder:0.5b-instruct
    fi
}

# Function to launch aider safely
launch_aider() {
    local mode="$1"
    shift
    local files="$@"

    log_info "Launching aider in $mode mode from: $CURRENT_DIR"

    case "$mode" in
        "quick")
            aider \
                --model "ollama/qwen2.5-coder:0.5b-instruct" \
                --editor-model "ollama/qwen2.5-coder:0.5b-instruct" \
                --no-auto-commits \
                --gitignore \
                --map-tokens 256 \
                --no-check-update \
                --no-show-model-warnings \
                $files
            ;;
        "quality")
            aider \
                --model "$AIDER_MODEL" \
                --editor-model "$EDITOR_MODEL" \
                --no-auto-commits \
                --gitignore \
                --map-tokens "$MAX_TOKENS" \
                --no-check-update \
                --no-show-model-warnings \
                $files
            ;;
        "chat")
            aider \
                --model "$AIDER_MODEL" \
                --chat \
                --no-auto-commits \
                --gitignore \
                --map-tokens "$MAX_TOKENS" \
                --no-check-update \
                --no-show-model-warnings
            ;;
        *)
            aider \
                --model "$AIDER_MODEL" \
                --editor-model "$EDITOR_MODEL" \
                --no-auto-commits \
                --gitignore \
                --map-tokens "$MAX_TOKENS" \
                --no-check-update \
                --no-show-model-warnings \
                $files
            ;;
    esac
}

# Main function
main() {
    log_info "Safe Aider Launcher - QRY Optimized"
    log_info "Current directory: $CURRENT_DIR"

    # Parse command line arguments
    local mode="quality"
    local files=""

    while [[ $# -gt 0 ]]; do
        case $1 in
            --quick|-q)
                mode="quick"
                shift
                ;;
            --chat|-c)
                mode="chat"
                shift
                ;;
            --quality|--default)
                mode="quality"
                shift
                ;;
            --help|-h)
                echo "Safe Aider Launcher Usage:"
                echo "  $0 [--quick|-q]     Use fast model (0.5b)"
                echo "  $0 [--quality]      Use quality model (3b) [default]"
                echo "  $0 [--chat|-c]      Launch in chat mode"
                echo "  $0 [files...]       Specify files to include"
                echo ""
                echo "Examples:"
                echo "  $0                  Launch with quality model"
                echo "  $0 --quick main.py  Quick edit of main.py"
                echo "  $0 --chat          Interactive chat mode"
                exit 0
                ;;
            *)
                # Assume it's a file
                if [ -f "$1" ]; then
                    files="$files $1"
                else
                    log_warning "File not found: $1 (ignoring)"
                fi
                shift
                ;;
        esac
    done

    # Setup
    check_ollama
    cleanup_git_refs
    create_project_aiderignore

    # Launch aider
    launch_aider "$mode" $files
}

# Error handling
trap 'log_error "An error occurred. Check the output above."' ERR

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
